name: build

on:
  push:

env:
  CACHE_VERSION: 2
  DEBIAN_FRONTEND: noninteractive
  HOMEBREW_NO_AUTO_UPDATE: 1

jobs:
  linux-arm64:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Set up cache
        uses: actions/cache@v2
        with:
          path: |
            ~/PawPawBuilds
          key: linux-arm64-v${{ env.CACHE_VERSION }}
      - name: Fix GitHub's mess
        run: |
          sudo rm -f /etc/apt/sources.list.d/microsoft-prod.list
          sudo apt-get update -qq
          sudo apt-get install -yqq --allow-downgrades libgd3/focal libpcre2-8-0/focal libpcre2-16-0/focal libpcre2-32-0/focal libpcre2-posix2/focal
          sudo apt-get purge -yqq libclang* libgbm* libllvm* libmono* moby* mono* php* libgdiplus libpcre2-posix3 libzip4
      - name: Set up dependencies
        run: |
          sudo dpkg --add-architecture arm64
          sudo sed -i "s/deb http/deb [arch=amd64] http/" /etc/apt/sources.list
          echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports focal main restricted universe multiverse" | sudo tee /etc/apt/sources.list.d/ports-arm64.list
          echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports focal-updates main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list.d/ports-arm64.list
          echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports focal-backports main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list.d/ports-arm64.list
          sudo apt-get update -qq
          sudo apt-get install -yqq g++-aarch64-linux-gnu libasound2-dev:arm64 libdbus-1-dev:arm64 libgl1-mesa-dev:arm64 libglib2.0-dev:arm64 libx11-dev:arm64 libxcursor-dev:arm64 libxext-dev:arm64 libxrandr-dev:arm64 qemu-user-static
      - name: Build extra dependencies
        run: |
          git clone --depth=1 https://github.com/DISTRHO/PawPaw.git
          ./PawPaw/bootstrap-cardinal.sh linux-aarch64
      - name: Build linux arm64 cross-compiled
        run: |
          pushd PawPaw; source local.env linux-aarch64; popd
          make features
          make NOOPT=true WITH_LTO=true -j $(nproc)
      - name: Set sha8
        id: slug
        run: echo "::set-output name=sha8::$(echo ${{ github.sha }} | cut -c1-8)"
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ github.event.repository.name }}-linux-arm64-${{ github.event.pull_request.number || steps.slug.outputs.sha8 }}
          path: |
            bin/*

  linux-armhf:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Set up cache
        uses: actions/cache@v2
        with:
          path: |
            ~/PawPawBuilds
          key: linux-armhf-v${{ env.CACHE_VERSION }}
      - name: Fix GitHub's mess
        run: |
          sudo rm -f /etc/apt/sources.list.d/microsoft-prod.list
          sudo apt-get update -qq
          sudo apt-get install -yqq --allow-downgrades libgd3/focal libpcre2-8-0/focal libpcre2-16-0/focal libpcre2-32-0/focal libpcre2-posix2/focal
          sudo apt-get purge -yqq libclang* libgbm* libllvm* libmono* moby* mono* php* libgdiplus libpcre2-posix3 libzip4
      - name: Set up dependencies
        run: |
          sudo dpkg --add-architecture armhf
          sudo sed -i "s/deb http/deb [arch=amd64] http/" /etc/apt/sources.list
          echo "deb [arch=armhf] http://ports.ubuntu.com/ubuntu-ports focal main restricted universe multiverse" | sudo tee /etc/apt/sources.list.d/ports-armhf.list
          echo "deb [arch=armhf] http://ports.ubuntu.com/ubuntu-ports focal-updates main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list.d/ports-armhf.list
          echo "deb [arch=armhf] http://ports.ubuntu.com/ubuntu-ports focal-backports main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list.d/ports-armhf.list
          sudo apt-get update -qq
          sudo apt-get install -yqq g++-arm-linux-gnueabihf libasound2-dev:armhf libdbus-1-dev:armhf libgl1-mesa-dev:armhf libglib2.0-dev:armhf libx11-dev:armhf libxcursor-dev:armhf libxext-dev:armhf libxrandr-dev:armhf qemu-user-static
      - name: Build extra dependencies
        run: |
          git clone --depth=1 https://github.com/DISTRHO/PawPaw.git
          ./PawPaw/bootstrap-cardinal.sh linux-armhf
      - name: Build linux armhf cross-compiled
        run: |
          pushd PawPaw; source local.env linux-armhf; popd
          make features
          make NOOPT=true WITH_LTO=true -j $(nproc)
      - name: Set sha8
        id: slug
        run: echo "::set-output name=sha8::$(echo ${{ github.sha }} | cut -c1-8)"
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ github.event.repository.name }}-linux-armhf-${{ github.event.pull_request.number || steps.slug.outputs.sha8 }}
          path: |
            bin/*

  linux-i686:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Set up cache
        uses: actions/cache@v2
        with:
          path: |
            ~/PawPawBuilds
          key: linux-i686-v${{ env.CACHE_VERSION }}
      - name: Fix GitHub's mess
        run: |
          sudo rm -f /etc/apt/sources.list.d/microsoft-prod.list
          sudo apt-get update -qq
          sudo apt-get install -yqq --allow-downgrades libgd3/focal libpcre2-8-0/focal libpcre2-16-0/focal libpcre2-32-0/focal libpcre2-posix2/focal
          sudo apt-get purge -yqq libclang* libgbm* libllvm* libmono* moby* mono* php* libgdiplus libpcre2-posix3 libzip4
      - name: Set up dependencies
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update -qq
          sudo apt-get install -yqq g++-i686-linux-gnu libasound2-dev:i386 libdbus-1-dev:i386 libgl1-mesa-dev:i386 libglib2.0-dev:i386 libx11-dev:i386 libxcursor-dev:i386 libxext-dev:i386 libxrandr-dev:i386
          sudo apt-get install -yqq binutils-mingw-w64-i686 g++-mingw-w64-i686 mingw-w64 lib32stdc++-9-dev libx32stdc++-9-dev libwine-dev:i386 wine-stable wine64-tools
      - name: Build extra dependencies
        run: |
          git clone --depth=1 https://github.com/DISTRHO/PawPaw.git
          ./PawPaw/bootstrap-cardinal.sh linux-i686
      - name: Build linux i686
        run: |
          pushd PawPaw; source local.env linux-i686; popd
          make features
          make NOOPT=true WITH_LTO=true all extra-win32 extra-wine32 -j $(nproc)
      - name: Build linux i686 extra
        run: |
          pushd PawPaw; source local.env linux; popd
          make CARLA_EXTRA_TARGETS=true NOOPT=true WITH_LTO=true -j $(nproc)
      - name: Set sha8
        id: slug
        run: echo "::set-output name=sha8::$(echo ${{ github.sha }} | cut -c1-8)"
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ github.event.repository.name }}-linux-i686-${{ github.event.pull_request.number || steps.slug.outputs.sha8 }}
          path: |
            bin/*

  linux-riscv64:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Set up cache
        uses: actions/cache@v2
        with:
          path: |
            ~/PawPawBuilds
          key: linux-riscv64-v${{ env.CACHE_VERSION }}
      - name: Fix GitHub's mess
        run: |
          sudo rm -f /etc/apt/sources.list.d/microsoft-prod.list
          sudo apt-get update -qq
          sudo apt-get install -yqq --allow-downgrades libgd3/focal libpcre2-8-0/focal libpcre2-16-0/focal libpcre2-32-0/focal libpcre2-posix2/focal
          sudo apt-get purge -yqq libclang* libgbm* libllvm* libmono* moby* mono* php* libgdiplus libpcre2-posix3 libzip4
      - name: Set up dependencies
        run: |
          sudo dpkg --add-architecture riscv64
          sudo sed -i "s/deb http/deb [arch=amd64] http/" /etc/apt/sources.list
          echo "deb [arch=riscv64] http://ports.ubuntu.com/ubuntu-ports focal main restricted universe multiverse" | sudo tee /etc/apt/sources.list.d/ports-riscv64.list
          echo "deb [arch=riscv64] http://ports.ubuntu.com/ubuntu-ports focal-updates main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list.d/ports-riscv64.list
          echo "deb [arch=riscv64] http://ports.ubuntu.com/ubuntu-ports focal-backports main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list.d/ports-riscv64.list
          sudo apt-get update -qq
          sudo apt-get install -yqq g++-riscv64-linux-gnu libasound2-dev:riscv64 libdbus-1-dev:riscv64 libgl1-mesa-dev:riscv64 libglapi-mesa:riscv64 libglvnd0:riscv64 libglib2.0-dev:riscv64 libx11-dev:riscv64 libxcursor-dev:riscv64 libxext-dev:riscv64 libxrandr-dev:riscv64 qemu-user-static
      - name: Build extra dependencies
        run: |
          git clone --depth=1 https://github.com/DISTRHO/PawPaw.git
          ./PawPaw/bootstrap-cardinal.sh linux-riscv64
      - name: Build linux riscv64
        run: |
          pushd PawPaw; source local.env linux-riscv64; popd
          make features
          make NOOPT=true WITH_LTO=true -j $(nproc)
      - name: Set sha8
        id: slug
        run: echo "::set-output name=sha8::$(echo ${{ github.sha }} | cut -c1-8)"
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ github.event.repository.name }}-linux-riscv64-${{ github.event.pull_request.number || steps.slug.outputs.sha8 }}
          path: |
            bin/*

  linux-x86_64:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Set up cache
        uses: actions/cache@v2
        with:
          path: |
            ~/PawPawBuilds
          key: linux-x86_64-v${{ env.CACHE_VERSION }}
      - name: Fix GitHub's mess
        run: |
          sudo rm -f /etc/apt/sources.list.d/microsoft-prod.list
          sudo apt-get update -qq
          sudo apt-get install -yqq --allow-downgrades libgd3/focal libpcre2-8-0/focal libpcre2-16-0/focal libpcre2-32-0/focal libpcre2-posix2/focal
          sudo apt-get purge -yqq libclang* libgbm* libllvm* libmono* moby* mono* php* libgdiplus libpcre2-posix3 libzip4
      - name: Set up dependencies
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update -qq
          sudo apt-get install -yqq libasound2-dev libdbus-1-dev libgl1-mesa-dev libglib2.0-dev libx11-dev libxcursor-dev libxext-dev libxrandr-dev
          sudo apt-get install -yqq g++-multilib libx11-dev:i386
          sudo apt-get install -yqq binutils-mingw-w64-i686 binutils-mingw-w64-x86-64 g++-mingw-w64-i686 g++-mingw-w64-x86-64 mingw-w64 wine-stable wine64-tools
      - name: Build extra dependencies
        run: |
          git clone --depth=1 https://github.com/DISTRHO/PawPaw.git
          ./PawPaw/bootstrap-cardinal.sh linux
      - name: Build linux x86_64
        run: |
          pushd PawPaw; source local.env linux; popd
          make features
          make NOOPT=true WITH_LTO=true all extra-posix32 extra-win32 extra-win64 extra-wine64 -j $(nproc)
      - name: Build linux x86_64 extra
        run: |
          sudo apt-get install libwine-dev:i386
          pushd PawPaw; source local.env linux; popd
          make CARLA_EXTRA_TARGETS=true NOOPT=true WITH_LTO=true extra-wine32 -j $(nproc)
          make CARLA_EXTRA_TARGETS=true NOOPT=true WITH_LTO=true -j $(nproc)
      - name: Set sha8
        id: slug
        run: echo "::set-output name=sha8::$(echo ${{ github.sha }} | cut -c1-8)"
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ github.event.repository.name }}-linux-x86_64-${{ github.event.pull_request.number || steps.slug.outputs.sha8 }}
          path: |
            bin/*

  macos-universal:
    runs-on: macos-11
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Set up cache
        uses: actions/cache@v2
        with:
          path: |
            ~/PawPawBuilds
          key: macos-universal-v${{ env.CACHE_VERSION }}
      - name: Build extra dependencies
        run: |
          git clone --depth=1 https://github.com/DISTRHO/PawPaw.git
          ./PawPaw/bootstrap-cardinal.sh macos-universal
      - name: Build macOS universal
        run: |
          pushd PawPaw; source local.env macos-universal; popd
          make features
          make NOOPT=true WITH_LTO=true -j $(sysctl -n hw.logicalcpu)
          ./dpf/utils/package-osx-bundles.sh
      - name: Set sha8
        id: slug
        run: echo "::set-output name=sha8::$(echo ${{ github.sha }} | cut -c1-8)"
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ github.event.repository.name }}-macOS-universal-${{ github.event.pull_request.number || steps.slug.outputs.sha8 }}
          path: |
            *-macOS.pkg
            bin/*
            !bin/*-ladspa.dylib
            !bin/*-dssi.dylib
            !bin/lv2
            !bin/vst2
            !bin/vst3

  win32:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Set up cache
        uses: actions/cache@v2
        with:
          path: |
            ~/PawPawBuilds
          key: win32-v${{ env.CACHE_VERSION }}
      - name: Fix GitHub's mess
        run: |
          sudo rm -f /etc/apt/sources.list.d/microsoft-prod.list
          sudo apt-get update -qq
          sudo apt-get install -yqq --allow-downgrades libgd3/jammy
          sudo apt-get purge -yqq libmono* moby* mono* msbuild* php* libgdiplus libpcre2-posix3 nuget
      - name: Set up dependencies
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update -qq
          sudo apt-get install -yqq binutils-mingw-w64-i686 g++-mingw-w64-i686 mingw-w64 wine-stable
      - name: Build extra dependencies
        run: |
          git clone --depth=1 https://github.com/DISTRHO/PawPaw.git
          ./PawPaw/bootstrap-cardinal.sh win32
      - name: Build win32 cross-compiled
        run: |
          pushd PawPaw; source local.env win32; popd
          make features
          make CARLA_EXTRA_TARGETS=true NOOPT=true WITH_LTO=true -j $(nproc)
      - name: Set sha8
        id: slug
        run: echo "::set-output name=sha8::$(echo ${{ github.sha }} | cut -c1-8)"
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ github.event.repository.name }}-win32-${{ github.event.pull_request.number || steps.slug.outputs.sha8 }}
          path: |
            bin/*
            !bin/*-ladspa.dll
            !bin/*-dssi.dll

  win64:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Set up cache
        uses: actions/cache@v2
        with:
          path: |
            ~/PawPawBuilds
          key: win64-v${{ env.CACHE_VERSION }}
      - name: Fix GitHub's mess
        run: |
          sudo rm -f /etc/apt/sources.list.d/microsoft-prod.list
          sudo apt-get update -qq
          sudo apt-get install -yqq --allow-downgrades libgd3/jammy
          sudo apt-get purge -yqq libmono* moby* mono* msbuild* php* libgdiplus libpcre2-posix3 nuget
      - name: Set up dependencies
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update -qq
          sudo apt-get install -yqq binutils-mingw-w64-x86-64 g++-mingw-w64-x86-64 mingw-w64 wine-stable
      - name: Build extra dependencies
        run: |
          git clone --depth=1 https://github.com/DISTRHO/PawPaw.git
          ./PawPaw/bootstrap-cardinal.sh win64
      - name: Build win64 cross-compiled
        run: |
          pushd PawPaw; source local.env win64; popd
          make features
          make CARLA_EXTRA_TARGETS=true NOOPT=true WITH_LTO=true -j $(nproc)
      - name: Set sha8
        id: slug
        run: echo "::set-output name=sha8::$(echo ${{ github.sha }} | cut -c1-8)"
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ github.event.repository.name }}-win64-${{ github.event.pull_request.number || steps.slug.outputs.sha8 }}
          path: |
            bin/*
            !bin/*-ladspa.dll
            !bin/*-dssi.dll

  source-tarball:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Set up dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -yqq libgl1-mesa-dev libx11-dev libxcursor-dev libxext-dev libxrandr-dev
      - name: Create source tarball
        run: |
          make tarball
      - name: Set sha8 (non-release)
        if: startsWith(github.ref, 'refs/tags/') != true
        id: slug1
        run: echo "::set-output name=sha8::$(echo ${{ github.sha }} | cut -c1-8)"
      - name: Set sha8 (release)
        if: startsWith(github.ref, 'refs/tags/')
        id: slug2
        run: echo "::set-output name=sha8::$(echo ${{ github.ref_name }})"
      - name: Set sha8
        id: slug
        run: echo "::set-output name=sha8::$(echo ${{ steps.slug1.outputs.sha8 || steps.slug2.outputs.sha8 }})"
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ github.event.repository.name }}-source-${{ github.event.pull_request.number || steps.slug.outputs.sha8 }}
          path: |
            /home/runner/*.tar.xz
            /home/runner/*/*.tar.xz
            /home/runner/*/*/*.tar.xz
      - uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: |
            /home/runner/*.tar.xz
            /home/runner/*/*.tar.xz
            /home/runner/*/*/*.tar.xz

  plugin-validation:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Set up dependencies
        run: |
          # custom repos
          wget https://launchpad.net/~kxstudio-debian/+archive/kxstudio/+files/kxstudio-repos_11.1.0_all.deb
          sudo dpkg -i kxstudio-repos_11.1.0_all.deb
          sudo apt-get update -qq
          # build-deps
          sudo apt-get install -yqq libdbus-1-dev libgl1-mesa-dev libx11-dev libxcursor-dev libxext-dev libxrandr-dev
          # runtime testing
          sudo apt-get install -yqq carla-git lilv-utils lv2-dev lv2lint kxstudio-lv2-extensions mod-lv2-extensions valgrind xvfb
      - name: Build plugins
        env:
          CFLAGS: -g
          CXXFLAGS: -g -DDPF_ABORT_ON_ERROR -DDPF_RUNTIME_TESTING
          LDFLAGS: -static-libgcc -static-libstdc++
        run: |
          make features
          make NOOPT=true SKIP_STRIPPING=true -j $(nproc)
      - name: Run Ildaeil self-tests
        run: |
          xvfb-run valgrind \
                --gen-suppressions=all \
                --error-exitcode=255 \
                --leak-check=no \
                --track-origins=yes \
                --suppressions=./dpf/utils/valgrind-dpf.supp \
                ./bin/Ildaeil-FX selftest
      - name: Validate LV2 ttl syntax
        run: |
          lv2_validate \
              /usr/lib/lv2/mod.lv2/*.ttl \
              /usr/lib/lv2/kx-meta/*.ttl \
              /usr/lib/lv2/kx-control-input-port-change-request.lv2/*.ttl \
              /usr/lib/lv2/kx-programs.lv2/*.ttl \
              ./bin/*.lv2/*.ttl
      - name: Validate LV2 metadata and binaries
        run: |
          export LV2_PATH=/tmp/lv2-path
          mkdir ${LV2_PATH}
          cp -r bin/*.lv2 \
              /usr/lib/lv2/{atom,buf-size,core,data-access,kx-control-input-port-change-request,kx-programs,instance-access,midi,parameters,port-groups,port-props,options,patch,presets,resize-port,state,time,ui,units,urid,worker}.lv2 \
              ${LV2_PATH}
          lv2lint -s lv2_generate_ttl -l ld-linux-x86-64.so.2 -M nopack $(lv2ls)
      - name: Test LV2 plugins
        run: |
            export LV2_PATH=/tmp/lv2-path
            for p in $(lv2ls); do \
                env CARLA_BRIDGE_DUMMY=1 CARLA_BRIDGE_TESTING=native \
                    valgrind \
                    --error-exitcode=255 \
                    --leak-check=full \
                    --track-origins=yes \
                    --suppressions=./dpf/utils/valgrind-dpf.supp \
                    /usr/lib/carla/carla-bridge-native lv2 "" ${p} 1>/dev/null; \
            done
      - name: Test VST2 plugins
        run: |
            for p in $(find bin/ | grep -e vst.so -e '.*\.vst/.*\.so'); do \
                env CARLA_BRIDGE_DUMMY=1 CARLA_BRIDGE_TESTING=native \
                    valgrind \
                    --error-exitcode=255 \
                    --leak-check=full \
                    --track-origins=yes \
                    --suppressions=./dpf/utils/valgrind-dpf.supp \
                    /usr/lib/carla/carla-bridge-native vst2 ./${p} "" 1>/dev/null; \
            done
      - name: Test VST3 plugins
        run: |
            for p in $(ls bin/ | grep vst3); do \
                env CARLA_BRIDGE_DUMMY=1 CARLA_BRIDGE_TESTING=native \
                    valgrind \
                    --error-exitcode=255 \
                    --leak-check=full \
                    --track-origins=yes \
                    --suppressions=./dpf/utils/valgrind-dpf.supp \
                    /usr/lib/carla/carla-bridge-native vst3 ./bin/${p} "" 1>/dev/null; \
            done
